/*
1.In SQL Server, assuming you can find the result by using both joins and subqueries, which one would you prefer to use and why?
	Joins are considered to be faster than subqueries, but subqueries are more readable comparing to joins. 
	Depends on the complexity of the query, if speed will not be a problem, it's better to use subquery, else join

2.What is CTE and when to use it?
	Common Table Expression. It is used to create recursive query that may need to join the same dataset.
	Substitute for a view when the general use of view is not rquired.
	Improve readability and maintainance on complex queries.
	CTEs can be defined in user-defined routines: functions, procedures, triggers, and views.

3.What are Table Variables? What is their scope and where are they created in SQL Server?
	A data type that is created and defined to store values. Its scope is within the SQL batch, functions or store procedures.
	It cannot be accessed from outside of scope.
	
4.What is the difference between DELETE and TRUNCATE? Which one will have better performance and why?
	Delete: lock and remove a single rows at a time. It doesn't reseed identity values, can fire triggers
	Truncate: lock the table and remove all records in the table. It reseed identity values, cannot fire triggers. It is faster than Delete

5.What is Identity column? How does DELETE and TRUNCATE affect it?
	Identity Column is a column generated by the database. 
	Delete a row will not reset the identity value of the record but will keep increasing it
	Truncate a table will reset all identity values of the table.

6.What is difference between “delete from table_name” and “truncate table table_name”?
	Both will delete all records but truncate is faster. However, truncate cannot rollback changes.
*/

USE [Northwind]
GO

-- 1
SELECT DISTINCT c.City FROM Customers c 
INNER JOIN Employees e ON c.City = e.City; 

-- 2a
SELECT DISTINCT City FROM Customers 
WHERE City NOT IN (SELECT City FROM Employees); 

-- 2b
SELECT c.City FROM Customers c 
LEFT JOIN Employees e ON c.City = e.City
WHERE e.EmployeeID IS NULL;

-- 3
SELECT p.ProductID, SUM(od.Quantity) FROM Products p 
INNER JOIN [Order Details] od ON od.ProductID = p.ProductID
GROUP BY p.ProductID;

-- 4
SELECT c.City, SUM(od.Quantity) FROM Customers c
LEFT JOIN Orders o ON o.ShipCity = c.City
INNER JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY c.City
ORDER BY SUM(od.Quantity) DESC;

-- 5a
SELECT c1.City FROM Customers c1 GROUP BY c1.City HAVING COUNT(c1.City) > 2
UNION
SELECT c2.City FROM Customers c2 GROUP BY c2.City HAVING COUNT(c2.City) = 2;

-- 5b
SELECT DISTINCT City FROM Customers WHERE City IN (SELECT City From Customers GROUP BY City HAVING COUNT(City) >= 2) ;

-- 6
SELECT c.City, COUNT(DISTINCT od.ProductID) FROM Customers c
LEFT JOIN Orders o ON o.ShipCity = c.City
INNER JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY c.City
HAVING COUNT(DISTINCT od.ProductID) > 2 ORDER BY c.City;

-- 7
SELECT c.ContactName "Customer" FROM Customers c
INNER JOIN Orders o ON c.CustomerID = o.CustomerID WHERE c.City != o.ShipCity;

-- 8
WITH [CTE_BestCityAndAvgPrice] AS
(
	SELECT [Best City].ProductID, [Best City].ShipCity, AVG(od.UnitPrice) [Average Price]
	FROM (
		SELECT od.ProductID, o.ShipCity, SUM(od.Quantity) [Sum], 
		ROW_NUMBER() OVER (PARTITION BY od.ProductID ORDER BY SUM(od.Quantity) DESC) as RankNum
		FROM [Order Details] od
		LEFT JOIN Orders o ON o.OrderID = od.OrderID
		GROUP BY o.ShipCity, od.ProductID
		) [Best City]
	INNER JOIN [Order Details] od ON [Best City].ProductID = od.ProductID
	WHERE RankNum = 1
	GROUP BY [Best City].ProductID, [Best City].ShipCity
), [CTE_Most5Popular] AS (
	SELECT TOP(5) p.ProductID, SUM(od.Quantity) [Total Quantity] FROM Products p 
	INNER JOIN [Order Details] od ON od.ProductID = p.ProductID
	GROUP BY p.ProductID ORDER BY [Total Quantity] DESC
) SELECT a.ProductID, b.[Average Price], b.ShipCity FROM [CTE_Most5Popular] a
INNER JOIN [CTE_BestCityAndAvgPrice] b ON a.ProductID = b.ProductID
ORDER BY a.[Total Quantity] DESC;

-- 9a
SELECT DISTINCT e.City FROM Employees e
WHERE e.City NOT IN ( SELECT c.City FROM Orders o 
					INNER JOIN Customers c ON c.CustomerID = o.CustomerID)

-- 9b
SELECT DISTINCT e.City FROM Employees e
LEFT JOIN Customers c ON e.City = c.City
WHERE c.City IS NULL

-- 10
SELECT a.City FROM 
			(SELECT TOP 1 e.City FROM Employees e
			INNER JOIN Orders o ON e.EmployeeID = o.EmployeeID
			GROUP BY e.City
			ORDER BY COUNT(o.OrderID) DESC) a
INNER JOIN 
			(SELECT TOP 1 o.ShipCity "City" FROM [Orders] o 
			INNER JOIN [Order Details] od ON o.OrderID = od.OrderID
			GROUP BY o.ShipCity
			ORDER BY SUM(od.Quantity) DESC) b 
ON a.City = b.City;

-- 11
/*	ANSWER:
	1st method: find rows that have ROW_NUMBER() > 1 from subquery, and delete records that satisfy the subquery in the outer query
	2nd method: Copy distinct records to another temporary table, then delete all records that are not in the temporary table
*/

-- 12
WITH empHeirachy AS 
(
	SELECT e.empid, e.mgrid, 1 AS "lvl" FROM Employees e WHERE e.mgrid IS NULL
	UNION ALL
	SELECT e.empid, e.mgrid, eh.lvl + 1  FROM Employees e INNER JOIN empHeirachy eh ON e.mgrid = eh.empid
) SELECT * from empHeirachy WHERE lvl = (SELECT MAX(lvl) FROM empHeirachy);

-- 13
SELECT EmployeesByDept.*
FROM (
	SELECT TOP(1) deptid, COUNT(1) AS DCount
	FROM Employee
	GROUP BY deptid
	ORDER BY DCount DESC
) AS maxcount
INNER JOIN ( SELECT dept.id, dept.[name], COUNT(1) AS employeeCount
	FROM Dept
	INNER JOIN Employee ON Employee.deptid = deptid
	GROUP BY deptid, deptname ) EmployeesByDept;

-- 14
SELECT deptname,empid,salary
FROM (
	SELECT d.deptname, e.empid, e.salary, RANK() OVER ( PARTITION BY e.deptid ORDER BY
	e.salary DESC ) AS rankSalary
	FROM dept d, employee e
	WHERE d.deptid = e.deptid )
WHERE rankSalary <= 3
ORDER BY deptname,rnk;
